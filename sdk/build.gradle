//==================================================================================================
// PROJECT
//==================================================================================================
buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        // Android
        classpath 'com.android.tools.build:gradle:2.2.0'
        // Bintray
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        // COVERALLS
        classpath 'net.saliman:gradle-cobertura-plugin:2.3.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    }
}
task projectInfo << {
    println ""
    println " === ${project.group}:${project.name}:${project.version} - (${System.getenv("CIRCLE_BUILD_NUM")}) ==="
    println ""
}
def project_name = project.name
def version_name = project.version
if (System.getenv("IS_BETA")) {
    version_name = "${version_name}-${branchName}.${buildNumber}"
    project_name = "${project_name}.beta"
}
version = version_name
//==================================================================================================
// ANDROID
//==================================================================================================
apply plugin: 'com.android.library'
android {
    compileSdkVersion 15
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 15
        versionCode System.getenv("CIRCLE_BUILD_NUM") ? System.getenv("CIRCLE_BUILD_NUM").toInteger() : 1
        versionName version_name
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'sdk.pro'
        }
    }
}
dependencies {
    compile 'net.pubnative:player:2.0.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'net.pubnative:url_driller:1.3.4'
    // JVM tests
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.mockito:mockito-core:2.2.0'
}
//--------------------------------------------------------------------------------------------------
// COVERALLS
//--------------------------------------------------------------------------------------------------
apply plugin: "net.saliman.cobertura"
apply plugin: "com.github.kt3k.coveralls"
cobertura.coverageFormats = ['html', 'xml']
//----------------------------------------------------------------------------------------------
// MAVEN
//----------------------------------------------------------------------------------------------
apply plugin: 'maven-publish'
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.rootProject.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = JavadocMemberLevel.PUBLIC
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
publishing {
    publications {

        aar(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version_name
            artifact javadocJar
            if (!System.getenv("IS_BETA")) {
                artifact sourcesJar
            }
            android.libraryVariants.all { variant ->
                if (variant.buildType.name == "debug") return
                artifact variant.outputs[0].packageLibrary // This is the aar library
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
//----------------------------------------------------------------------------------------------
// BINTRAY
//----------------------------------------------------------------------------------------------
apply plugin: 'com.jfrog.bintray'
bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_API_KEY")
    publish = System.getenv("IS_BETA") ? true : false
    publications = ['aar']
    pkg {
        configurations = ['archives']
        userOrg = 'pubnative'
        repo = 'maven'
        name = project_name
        licenses = ['MIT']
        labels = ['android', 'advertising', 'sdk', 'pubnative', 'ads', 'nativeads', 'development']
        version {
            name = version_name
            vcsTag = version_name
            released = new Date()
            vcsUrl = System.getenv("CIRCLE_REPOSITORY_URL")
        }
    }
}